{"ast":null,"code":"import Cookies from \"js-cookie\";\nimport qs from 'qs';\nconst BASEAPI = 'http://localhost:5000';\n\nconst apiFetchPost = async (endpoint, body) => {\n  if (!body.token) {\n    let token = Cookies.get('token');\n\n    if (token) {\n      body.token = token;\n    }\n  }\n\n  const res = await fetch(BASEAPI + endpoint, {\n    method: 'POST',\n    headers: {\n      'Accept': 'application/json',\n      'Content-type': 'application/json'\n    },\n    body: JSON.stringify(body)\n  });\n  const json = await res.json(body);\n\n  if (json.notallowed) {\n    window.location.href = \"/\";\n    return;\n  }\n\n  return json;\n};\n\nconst apiFetchGet = async (endpoint, body = []) => {\n  if (!body.token) {\n    let token = Cookies.get('token');\n\n    if (token) {\n      body.token = token;\n    }\n  }\n\n  const res = await fetch(`${BASEAPI + endpoint}?${qs.stringify(body)}`);\n  const json = await res.json();\n\n  if (json.notallowed) {\n    window.location.href = \"/singin\";\n    return;\n  }\n\n  return json;\n};\n\nconst OLXApi = {\n  login: async (email, password) => {\n    const json = await apiFetchGet('/users', {\n      email\n    });\n\n    if (!json) {\n      var error = \"Usuário inexistente\";\n      return error;\n    }\n\n    if (json.password != password) {\n      var error = \"Senha incorreta!\";\n      return error;\n    }\n\n    return json;\n  },\n  register: async (name, email, password, stateLoc) => {\n    const json = await apiFetchPost('/users/', {\n      name,\n      email,\n      password,\n      state: stateLoc\n    });\n    return json;\n  },\n  getStates: async () => {\n    const json = await apiFetchGet('/states');\n    return json;\n  }\n};\nexport default (() => OLXApi);","map":{"version":3,"sources":["C:/Users/Administrador/Documents/OLX Clone root/frontend/src/helpers/OlxAPI.js"],"names":["Cookies","qs","BASEAPI","apiFetchPost","endpoint","body","token","get","res","fetch","method","headers","JSON","stringify","json","notallowed","window","location","href","apiFetchGet","OLXApi","login","email","password","error","register","name","stateLoc","state","getStates"],"mappings":"AAAA,OAAOA,OAAP,MAAoB,WAApB;AACA,OAAOC,EAAP,MAAe,IAAf;AAEA,MAAMC,OAAO,GAAG,uBAAhB;;AAGA,MAAMC,YAAY,GAAG,OAAMC,QAAN,EAAgBC,IAAhB,KAAyB;AAC1C,MAAG,CAACA,IAAI,CAACC,KAAT,EAAe;AACX,QAAIA,KAAK,GAAGN,OAAO,CAACO,GAAR,CAAY,OAAZ,CAAZ;;AACA,QAAGD,KAAH,EAAU;AACND,MAAAA,IAAI,CAACC,KAAL,GAAaA,KAAb;AACH;AACJ;;AAED,QAAME,GAAG,GAAG,MAAMC,KAAK,CAACP,OAAO,GAACE,QAAT,EAAmB;AAClCM,IAAAA,MAAM,EAAE,MAD0B;AAElCC,IAAAA,OAAO,EAAE;AACL,gBAAU,kBADL;AAEL,sBAAgB;AAFX,KAFyB;AAMlCN,IAAAA,IAAI,EAACO,IAAI,CAACC,SAAL,CAAeR,IAAf;AAN6B,GAAnB,CAAvB;AASA,QAAMS,IAAI,GAAG,MAAMN,GAAG,CAACM,IAAJ,CAAST,IAAT,CAAnB;;AAEA,MAAGS,IAAI,CAACC,UAAR,EAAmB;AACfC,IAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,GAAvB;AACA;AACH;;AAED,SAAOJ,IAAP;AAEH,CA1BD;;AA4BA,MAAMK,WAAW,GAAG,OAAOf,QAAP,EAAiBC,IAAI,GAAG,EAAxB,KAA+B;AAC/C,MAAG,CAACA,IAAI,CAACC,KAAT,EAAe;AACX,QAAIA,KAAK,GAAGN,OAAO,CAACO,GAAR,CAAY,OAAZ,CAAZ;;AACA,QAAGD,KAAH,EAAU;AACND,MAAAA,IAAI,CAACC,KAAL,GAAaA,KAAb;AACH;AACJ;;AAED,QAAME,GAAG,GAAI,MAAMC,KAAK,CAAE,GAAEP,OAAO,GAACE,QAAS,IAAGH,EAAE,CAACY,SAAH,CAAaR,IAAb,CAAmB,EAA3C,CAAxB;AACA,QAAMS,IAAI,GAAG,MAAMN,GAAG,CAACM,IAAJ,EAAnB;;AAEA,MAAGA,IAAI,CAACC,UAAR,EAAmB;AACfC,IAAAA,MAAM,CAACC,QAAP,CAAgBC,IAAhB,GAAuB,SAAvB;AACA;AACH;;AAED,SAAOJ,IAAP;AACH,CAjBD;;AAmBA,MAAMM,MAAM,GAAG;AAEXC,EAAAA,KAAK,EAAE,OAAMC,KAAN,EAAaC,QAAb,KAAyB;AAE5B,UAAMT,IAAI,GAAG,MAAMK,WAAW,CAC1B,QAD0B,EAE1B;AAAEG,MAAAA;AAAF,KAF0B,CAA9B;;AAKA,QAAI,CAACR,IAAL,EAAW;AACP,UAAIU,KAAK,GAAG,qBAAZ;AACA,aAAOA,KAAP;AACH;;AAED,QAAGV,IAAI,CAACS,QAAL,IAAiBA,QAApB,EAA6B;AACzB,UAAIC,KAAK,GAAG,kBAAZ;AACA,aAAOA,KAAP;AACH;;AAED,WAAOV,IAAP;AACH,GApBU;AAsBXW,EAAAA,QAAQ,EAAC,OAAOC,IAAP,EAAaJ,KAAb,EAAoBC,QAApB,EAA8BI,QAA9B,KAA2C;AAEhD,UAAMb,IAAI,GAAG,MAAMX,YAAY,CAC3B,SAD2B,EAE3B;AAACuB,MAAAA,IAAD;AAAOJ,MAAAA,KAAP;AAAcC,MAAAA,QAAd;AAAwBK,MAAAA,KAAK,EAAED;AAA/B,KAF2B,CAA/B;AAKA,WAAOb,IAAP;AACH,GA9BU;AAgCXe,EAAAA,SAAS,EAAE,YAAY;AAEnB,UAAMf,IAAI,GAAG,MAAMK,WAAW,CAC1B,SAD0B,CAA9B;AAIA,WAAOL,IAAP;AACH;AAvCU,CAAf;AA2CA,gBAAe,MAAMM,MAArB","sourcesContent":["import Cookies from \"js-cookie\";\r\nimport qs from 'qs';\r\n\r\nconst BASEAPI = 'http://localhost:5000';\r\n\r\n\r\nconst apiFetchPost = async(endpoint, body) => {\r\n    if(!body.token){\r\n        let token = Cookies.get('token');\r\n        if(token) {\r\n            body.token = token;\r\n        }\r\n    }\r\n    \r\n    const res = await fetch(BASEAPI+endpoint, {\r\n            method: 'POST',\r\n            headers: {\r\n                'Accept': 'application/json',\r\n                'Content-type': 'application/json'\r\n            },\r\n            body:JSON.stringify(body)\r\n    });\r\n\r\n    const json = await res.json(body);\r\n\r\n    if(json.notallowed){\r\n        window.location.href = \"/\";\r\n        return;\r\n    }\r\n\r\n    return json;\r\n\r\n};\r\n\r\nconst apiFetchGet = async (endpoint, body = []) => {\r\n    if(!body.token){\r\n        let token = Cookies.get('token');\r\n        if(token) {\r\n            body.token = token;\r\n        }\r\n    }\r\n    \r\n    const res  = await fetch(`${BASEAPI+endpoint}?${qs.stringify(body)}`);\r\n    const json = await res.json();\r\n\r\n    if(json.notallowed){\r\n        window.location.href = \"/singin\";\r\n        return;\r\n    }\r\n\r\n    return json;\r\n};\r\n\r\nconst OLXApi = {\r\n    \r\n    login: async(email, password) =>{\r\n        \r\n        const json = await apiFetchGet(\r\n            '/users',\r\n            { email }\r\n        )\r\n\r\n        if (!json) {\r\n            var error = \"Usuário inexistente\";\r\n            return error;\r\n        }\r\n\r\n        if(json.password != password){\r\n            var error = \"Senha incorreta!\";\r\n            return error;\r\n        }\r\n\r\n        return json;\r\n    },\r\n\r\n    register:async (name, email, password, stateLoc) => {\r\n        \r\n        const json = await apiFetchPost(\r\n            '/users/',\r\n            {name, email, password, state: stateLoc}\r\n        )\r\n\r\n        return json;\r\n    },\r\n\r\n    getStates: async () => {\r\n        \r\n        const json = await apiFetchGet(\r\n            '/states'\r\n        );\r\n\r\n        return json;\r\n    }\r\n\r\n}\r\n\r\nexport default () => OLXApi;"]},"metadata":{},"sourceType":"module"}